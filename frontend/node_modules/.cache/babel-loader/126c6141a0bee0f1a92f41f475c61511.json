{"ast":null,"code":"import HttpService from './HttpService';\nimport base64 from 'react-native-base64';\nexport default class FileuploadService {\n  static baseURL() {\n    return 'http://localhost:5000';\n  }\n\n  static uploadCommentImage(file, userId) {\n    let formData = new FormData();\n    formData.append('userId', userId);\n    formData.append('action', 'comments');\n    formData.append('comment-image', file);\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return new Promise((resolve, reject) => {\n      fetch(`${FileuploadService.baseURL()}/upload`, {\n        method: 'POST',\n        headers: config,\n        body: formData\n      }).then(function (response) {\n        //handle success\n        return resolve(response.json());\n      }).catch(function (response) {\n        //handle error\n        console.log(response);\n        reject(response);\n      });\n    });\n  }\n\n  static uploadCMS(file, action) {\n    let formData = new FormData();\n    formData.append('action', action);\n    formData.append('file', file);\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return new Promise((resolve, reject) => {\n      fetch(`${FileuploadService.baseURL()}/uploadCMS`, {\n        method: 'POST',\n        headers: config,\n        body: formData\n      }).then(function (response) {\n        //handle success\n        return resolve(response.json());\n      }).catch(function (response) {\n        //handle error\n        console.log(response);\n        reject(response);\n      });\n    });\n  }\n\n  static deleteFile(name) {\n    return new Promise((resolve, reject) => {\n      HttpService.remove(`${FileuploadService.baseURL()}/delete/${base64.encode(name)}`, function (data) {\n        if (data.deleted !== undefined) {\n          resolve(data.deleted);\n        } else {\n          reject('Error while deleting');\n        }\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static checkFileSize(event, sizeLimit) {\n    let files = event.target.files;\n    let size = sizeLimit;\n    let err = '';\n\n    for (const f of files) {\n      if (f.size > size) {\n        err += f.type + 'is too large, please pick a smaller file\\n';\n      }\n    }\n\n    if (err !== '') {\n      event.target.value = null;\n      console.log(err);\n      return false;\n    }\n\n    return true;\n  }\n\n  static checkMimeType(event, types) {\n    //getting file object\n    let files = event.target.files; //define message container\n\n    let err = ''; // loop access array\n\n    for (const f of files) {\n      // compare file type find doesn't matach\n      if (types.every(type => f.type !== type)) {\n        // create error message and assign to container\n        err += f.type + ' is not a supported format\\n';\n      }\n    }\n\n    if (err !== '') {\n      // if message not same old that mean has error\n      event.target.value = null; // discard selected file\n\n      console.log(err);\n      return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/Users/carinawollendorfer/selfix/frontend/src/services/FileuploadService.js"],"names":["HttpService","base64","FileuploadService","baseURL","uploadCommentImage","file","userId","formData","FormData","append","config","headers","Promise","resolve","reject","fetch","method","body","then","response","json","catch","console","log","uploadCMS","action","deleteFile","name","remove","encode","data","deleted","undefined","textStatus","checkFileSize","event","sizeLimit","files","target","size","err","f","type","value","checkMimeType","types","every"],"mappings":"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","sourcesContent":["import HttpService from './HttpService';\nimport base64 from 'react-native-base64';\nexport default class FileuploadService {\n\n  static baseURL() {\n    return 'http://localhost:5000';\n  }\n\n  static uploadCommentImage(file, userId) {\n    let formData = new FormData();\n    formData.append('userId',userId);\n    formData.append('action', 'comments');\n    formData.append('comment-image', file);\n    const config = {headers: {'Content-Type': 'multipart/form-data'}};\n    return new Promise((resolve, reject) => {\n      fetch(`${FileuploadService.baseURL()}/upload`, {\n        method: 'POST',\n        headers: config,\n        body: formData,\n      })\n        .then(function (response) {\n        //handle success\n          return resolve(response.json());\n        })\n        .catch(function (response) {\n        //handle error\n          console.log(response);\n          reject(response);\n        });\n    });\n  }\n\n  static uploadCMS(file, action) {\n    let formData = new FormData();\n    formData.append('action', action);\n    formData.append('file', file);\n    const config = {headers: {'Content-Type': 'multipart/form-data'}};\n    return new Promise((resolve, reject) => {\n      fetch(`${FileuploadService.baseURL()}/uploadCMS`, {\n        method: 'POST',\n        headers: config,\n        body: formData,\n      })\n        .then(function (response) {\n        //handle success\n          return resolve(response.json());\n        })\n        .catch(function (response) {\n        //handle error\n          console.log(response);\n          reject(response);\n        });\n    });\n  }\n\n  static deleteFile(name) {\n    return new Promise((resolve, reject) => {\n      HttpService.remove(\n        `${FileuploadService.baseURL()}/delete/${base64.encode(name)}`,\n        function(data) {\n          if (data.deleted !== undefined) {\n            resolve(data.deleted);\n          } else {\n            reject('Error while deleting');\n          }\n        },\n        function(textStatus) {\n          reject(textStatus);\n        }\n      );\n    });\n  }\n\n  static checkFileSize(event, sizeLimit) {\n    let files = event.target.files;\n    let size = sizeLimit;\n    let err = '';\n    for (const f of files) {\n      if (f.size > size) {\n        err += f.type + 'is too large, please pick a smaller file\\n';\n      }\n    }\n    if (err !== '') {\n      event.target.value = null;\n      console.log(err);\n      return false;\n    }\n    return true;\n  }\n\n  static checkMimeType(event, types) {\n    //getting file object\n    let files = event.target.files;\n    //define message container\n    let err = '';\n    // loop access array\n    for (const f of files) {\n      // compare file type find doesn't matach\n      if (types.every(type => f.type !== type)) {\n        // create error message and assign to container\n        err += f.type + ' is not a supported format\\n';\n      }\n    }\n\n    if (err !== '') { // if message not same old that mean has error\n      event.target.value = null; // discard selected file\n      console.log(err);\n      return false;\n    }\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}