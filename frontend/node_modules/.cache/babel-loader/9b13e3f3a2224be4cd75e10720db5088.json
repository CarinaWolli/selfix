{"ast":null,"code":"import HttpService from './HttpService';\nexport default class UserService {\n  static baseURL() {\n    return 'http://localhost:4000/auth';\n  }\n\n  static baseURLUsers() {\n    return 'http://localhost:4000/users';\n  }\n\n  static register(user, pass, isAdmin) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseURL()}/register`, {\n        username: user,\n        password: pass,\n        isAdmin: isAdmin\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static login(user, pass) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseURL()}/login`, {\n        username: user,\n        password: pass\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static getUser(id) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(`${UserService.baseURLUsers()}/${id}`, function (data) {\n        if (data !== undefined || Object.keys(data).length !== 0) {\n          resolve(data);\n        } else {\n          reject('Error while retrieving user');\n        }\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static logout() {\n    window.localStorage.removeItem('jwtToken');\n  }\n\n}","map":{"version":3,"sources":["/Users/carinawollendorfer/selfix/frontend/src/services/UserService.js"],"names":["HttpService","UserService","baseURL","baseURLUsers","register","user","pass","isAdmin","Promise","resolve","reject","post","username","password","data","textStatus","login","getUser","id","get","undefined","Object","keys","length","logout","window","localStorage","removeItem"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC/B,SAAOC,OAAP,GAAiB;AACf,WAAO,4BAAP;AACD;;AAED,SAAOC,YAAP,GAAsB;AACpB,WAAO,6BAAP;AACD;;AAED,SAAOC,QAAP,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AACnC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,WAAW,CAACW,IAAZ,CACG,GAAEV,WAAW,CAACC,OAAZ,EAAsB,WAD3B,EAEE;AACEU,QAAAA,QAAQ,EAAEP,IADZ;AAEEQ,QAAAA,QAAQ,EAAEP,IAFZ;AAGEC,QAAAA,OAAO,EAAEA;AAHX,OAFF,EAOE,UAASO,IAAT,EAAe;AACbL,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OATH,EAUE,UAASC,UAAT,EAAqB;AACnBL,QAAAA,MAAM,CAACK,UAAD,CAAN;AACD,OAZH;AAcD,KAfM,CAAP;AAgBD;;AAED,SAAOC,KAAP,CAAaX,IAAb,EAAmBC,IAAnB,EAAyB;AACvB,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,WAAW,CAACW,IAAZ,CACG,GAAEV,WAAW,CAACC,OAAZ,EAAsB,QAD3B,EAEE;AACEU,QAAAA,QAAQ,EAAEP,IADZ;AAEEQ,QAAAA,QAAQ,EAAEP;AAFZ,OAFF,EAME,UAASQ,IAAT,EAAe;AACbL,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OARH,EASE,UAASC,UAAT,EAAqB;AACnBL,QAAAA,MAAM,CAACK,UAAD,CAAN;AACD,OAXH;AAaD,KAdM,CAAP;AAeD;;AAED,SAAOE,OAAP,CAAeC,EAAf,EAAmB;AACjB,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,WAAW,CAACmB,GAAZ,CACG,GAAElB,WAAW,CAACE,YAAZ,EAA2B,IAAGe,EAAG,EADtC,EAEE,UAASJ,IAAT,EAAe;AACb,YAAIA,IAAI,KAAKM,SAAT,IAAsBC,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBS,MAAlB,KAA6B,CAAvD,EAA0D;AACxDd,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD,SAFD,MAEO;AACLJ,UAAAA,MAAM,CAAC,6BAAD,CAAN;AACD;AACF,OARH,EASE,UAASK,UAAT,EAAqB;AACnBL,QAAAA,MAAM,CAACK,UAAD,CAAN;AACD,OAXH;AAaD,KAdM,CAAP;AAeD;;AAED,SAAOS,MAAP,GAAgB;AACdC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,UAA/B;AACD;;AAlE8B","sourcesContent":["import HttpService from './HttpService';\n\nexport default class UserService {\n  static baseURL() {\n    return 'http://localhost:4000/auth';\n  }\n\n  static baseURLUsers() {\n    return 'http://localhost:4000/users';\n  }\n\n  static register(user, pass, isAdmin) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(\n        `${UserService.baseURL()}/register`,\n        {\n          username: user,\n          password: pass,\n          isAdmin: isAdmin,\n        },\n        function(data) {\n          resolve(data);\n        },\n        function(textStatus) {\n          reject(textStatus);\n        }\n      );\n    });\n  }\n\n  static login(user, pass) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(\n        `${UserService.baseURL()}/login`,\n        {\n          username: user,\n          password: pass,\n        },\n        function(data) {\n          resolve(data);\n        },\n        function(textStatus) {\n          reject(textStatus);\n        }\n      );\n    });\n  }\n\n  static getUser(id) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(\n        `${UserService.baseURLUsers()}/${id}`,\n        function(data) {\n          if (data !== undefined || Object.keys(data).length !== 0) {\n            resolve(data);\n          } else {\n            reject('Error while retrieving user');\n          }\n        },\n        function(textStatus) {\n          reject(textStatus);\n        }\n      );\n    });\n  }\n\n  static logout() {\n    window.localStorage.removeItem('jwtToken');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}